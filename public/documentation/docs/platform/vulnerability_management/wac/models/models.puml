@startuml

class DefectDojo {
    host: string
    token: string
    skip_tls: bool
}

class Organization {
    uuid: string
    name: string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
}

class WorkSpace {
    uuid: string
    name: string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
}

class Product {
    uuid: uuid
    name: string
    description: string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
    ..
    external_audience (dd): bool
    internet_accessible (dd): bool
    prod_type_id (dd): int
    enable_full_risk_acceptance (dd): bool
    enable_simple_risk_acceptance (dd): bool
    sla_configuration_id (dd): int
    disable_sla_breach_notifications (dd): bool
    enable_product_tag_inheritance (dd): bool
    async_updating (dd): bool
}

class ProductDefectDojo {
    defect_dojo_id: int
}

class VCSProject {
    uuid: uuid
    path: string
    ref: string
    languages: []string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
}

class VCSEvents {
    uuid: uuid
    iid: int
    type: VCSEventTypeENUM
    job_name: string
    host_name: string
    project_id: string
    project_path: string
    hash_commit: string
    ref: string
    date: timestamp
}

class VCSEventTypeENUM {
    MANUAL
    PUSH
    MERGE_REQUEST
    ...
}

class VCSHostingTypeENUM {
    GITLAB
    GITHUB
}

class VCSHosting {
    uuid: uuid
    host: string
    token: string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
}

class Server {
    uuid: uuid
    host: string
    creator_uuid: uuid
    creator_username: string
    created_at: timestamp
    deleted_at: timestamp
}

class ScanSettings {
    uuid: uuid
    name: string
    core_type: CoreTypeENUM
    data: TEXT
}

class SecurityPipeline {
    uuid: uuid
    name: string
    disabled: bool
    triggers: Trigger
    actions: []Action
}

class SecurityPipelineExecution {
    uuid: uuid
    name: string
    started_at: timestamp
    finished_at: timestamp
    status: SecurityPipelineExecutionStatusENUM
    progress: int
    start_event: VCSEvents
    vcs_project: VCSProject
    vuln_stats: VulnStats
}

class VulnStats {
    severity: VulnSeverityENUM
    count: int
}

class VulnSeverityENUM {
    LOW
    INFO
    MEDIUM
    HIGH
}

class SecurityPipelineExecutionStatusENUM {
    CREATED
    RUNNING
    FINISHED
    STOPPED
    FAILED
}

class Trigger {
    uuid: string
    event_type: VCSEventTypeENUM
    param: str
}

class EventType {
    vcs_project_uuid: VCSProject
    vcs_hosting_uuid: VCSHosting
    event_type: VCSEventTypeENUM
    action: ActionTypeENUM
    hash_commit: string
    ref: string
    date: timestamp
}

class Action {
    uuid: uuid
    security_pipeline_uuid: SecurityPipeline
    core_type: CoreTypeENUM
    tool_type: ToolTypeENUM
    scan_settings_uuid: ScanSettings
    server_uuid: Optional[Server]
    vcs_publish_comment: bool
}

class ActionExecution {
    uuid: uuid
    started_at: timestamp
    updated_at: timestamp
    finished_at: timestamp
    security_pipeline_execution: SecurityPipelineExecution
    core_type: CoreTypeENUM
    tool_type: ToolTypeENUM
    status: ActionStatusENUM
    vulns_upload_status: VulnsUploadStatusENUM
    error_reason: ActionStatusErrorReasonENUM
    error_code: string
    vuln_count: int
    scan_settings: JSON
    server: string
    vcs_publish_comment: bool
}

class VulnsUploadStatusENUM {
    CREATED
    IN_PROGRESS
    COMPLETED
    FAILED
}

package "[[/entities/docs/blank?dh-doc-id=asoc.entities Entities]]" as Entities {
    class "[[/entities/docs/blank?dh-doc-id=asoc.entities.scan_settings.dast.auth_profile AuthProfile]]" as AuthProfile {}
}

' links
Organization "1" *-- "many" WorkSpace

WorkSpace "many" -- "many" Product

Product "1" -- "1" ProductDefectDojo

Product "many" -- "many" VCSProject
Product "1" *-- "many" Server
Product "1" *-- "many" SecurityPipeline

VCSProject "many" --* "1" VCSHosting
VCSHosting --> VCSHostingTypeENUM

Trigger "many" -- "many" VCSProject
Trigger "1" *--* "1" SecurityPipeline
Trigger --> EventType

SecurityPipeline "1" *-- "many" SecurityPipelineExecution
SecurityPipelineExecution --> SecurityPipelineExecutionStatusENUM
SecurityPipelineExecution "many" --* "1" VCSProject

SecurityPipeline "many" -- "many" VCSProject

SecurityPipeline "1" *-- Action

VCSEvents -> VCSEventTypeENUM
VCSEvents "1" *-- SecurityPipelineExecution

Action "many" --* "1" Server
Action "many" --* "1" ScanSettings

SecurityPipelineExecution -> VulnStats
VulnStats -> VulnSeverityENUM

ActionExecution "many" -- "1" Action
ActionExecution -> VulnsUploadStatusENUM

AuthProfile "many" -- "1" Product

@enduml
